import 'dart:convert';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:image_picker/image_picker.dart';
import 'package:kadu_booking_app/providers/userdetailsprovider.dart';
import 'package:kadu_booking_app/theme/color.dart';
import 'package:kadu_booking_app/uihelper/uihelper.dart';
import 'package:provider/provider.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';

class TokenResponse {
  final String? token; // Use String? to allow null

  TokenResponse({this.token});

  factory TokenResponse.fromJson(Map<String, dynamic> json) {
    return TokenResponse(
      token: json['token'],
    );
  }
}

class EditProfile extends StatefulWidget {
  final String myProfile;

  const EditProfile({Key? key, required this.myProfile}) : super(key: key);
  @override
  State<EditProfile> createState() => _EditProfileState();
}

class _EditProfileState extends State<EditProfile> {
  TextEditingController nameController = TextEditingController();
  TextEditingController emailController = TextEditingController();
  TextEditingController phoneController = TextEditingController();
  TextEditingController addressController = TextEditingController();

  late UserDetailsProvider userDetailsProvider;
  late UserDetails userDetails;
  late File? _image; // Added the missing declaration
  final picker = ImagePicker(); // Added the ImagePicker

  void updateProfile() async {
    UserDetailsProvider userDetailsProvider =
        Provider.of<UserDetailsProvider>(context, listen: false);

    UserDetails userDetails = userDetailsProvider.userDetails!;
    String newName = nameController.text;
    String newEmail = emailController.text;
    String newPhone = phoneController.text;
    String newAddress = addressController.text;
    // Check if any fields have changed
    if (newName != userDetails.name ||
        newEmail != userDetails.email ||
        newPhone != userDetails.phone?.toString() ||
        newAddress != userDetails.address) {
      Map<String, dynamic> requestBody = {
        "name": newName,
        "email": newEmail,
        "phone": newPhone,
        "address": newAddress,
      };
      var _getToken = await getToken();
      var token = _getToken.token;
      try {
        final response = await http.post(
          Uri.parse('http://192.168.29.180:8000/api/user/update'),
          body: json.encode(requestBody),
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ${token}',
          },
        );

        if (response.statusCode == 200) {
          print("Profile updated successfully!");
          setState(() {
            userDetails = UserDetails(
              socialSecurity: userDetails.socialSecurity,
              name: newName,
              email: newEmail,
              phone: int.tryParse(newPhone),
              address: newAddress,
              roleId: userDetails.roleId,
              isVerified: userDetails.isVerified,
              isActive: userDetails.isActive,
              emailVerifiedAt: userDetails.emailVerifiedAt,
              createdAt: userDetails.createdAt,
              updatedAt: userDetails.updatedAt,
              favoriteProperties: userDetails.favoriteProperties,
            );
          });
        } else {
          print(
              "Failed to update profile. Status code: ${response.statusCode}");
        }
      } catch (error) {
        print("Error during profile update: $error");
      }
    }

    if (_image != null) {
      await uploadProfileImage();
    }
  }

  Future<void> uploadProfileImage() async {
    try {
      var _getToken = await getToken();
      var token = _getToken.token;
      var uri = Uri.parse('http://192.168.29.180:8000/api/user/update_image');
      var request = http.MultipartRequest('POST', uri)
        ..headers['Authorization'] = 'Bearer $token'
        ..files.add(
            await http.MultipartFile.fromPath('profile_image', _image!.path));

      var response = await request.send();

      if (response.statusCode == 200) {
        print("Profile image updated successfully!");
      } else {
        print(
            "Failed to update profile image. Status code: ${response.statusCode}");
      }
    } catch (error) {
      print("Error during profile image update: $error");
    }
  }

  Future<void> getImage() async {
    var pickedFile = await picker.pickImage(source: ImageSource.gallery);

    if (pickedFile != null) {
      setState(() {
        _image = File(pickedFile.path);
      });
    }
  }

  Future<TokenResponse> getToken() async {
    var prefs = await SharedPreferences.getInstance();
    var tokenString = prefs.getString('token') ?? '';
    var tokenMap = json.decode(tokenString);
    var tokenResponse = TokenResponse.fromJson(tokenMap);
    return tokenResponse;
  }

  @override
  void initState() {
    super.initState();
    userDetailsProvider =
        Provider.of<UserDetailsProvider>(context, listen: false);
    userDetails = userDetailsProvider.userDetails!;
    print("$userDetails");
  }

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      child: Container(
        height: MediaQuery.of(context).size.height,
        color: AppColors.backgroundColorDefault,
        alignment: Alignment.center,
        child: Column(children: <Widget>[
          AppBar(
            backgroundColor: Colors.white,
            leading: IconButton(
              icon: Icon(
                Icons.arrow_back,
                size: 25,
                color: AppColors.primaryColorOrange,
              ),
              onPressed: () => Navigator.pop(context),
            ),
            title: Text(
              widget.myProfile,
              style: GoogleFonts.poppins(
                  fontSize: 25, color: AppColors.textColorPrimary),
            ),
          ),
          verticalSpaceLarge,
          Align(
            child: Container(
              width: 50 * 2,
              height: 50 * 2,
              child: GestureDetector(
                onTap: getImage,
                child: CircleAvatar(
                  radius: 50,
                  backgroundImage: _image == null
                      ? AssetImage('assets/default_user_avatar.png')
                          as ImageProvider<Object>
                      : _image == null
                          ? AssetImage('assets/default_user_avatar.png')
                              as ImageProvider<
                                  Object> // Replace with the correct path
                          : FileImage(_image!) as ImageProvider<Object>,
                ),
              ),
            ),
          ),
          ProfileTextfield(
            label: 'Name',
            hintText: userDetails.name ?? '',
            initialValue: 'User',
            onChanged: (value) {
              nameController.text = value;
            },
          ),
          verticalSpaceRegular,
          ProfileTextfield(
            label: 'Email Address',
            hintText: userDetails.email ?? '',
            initialValue: 'User',
            onChanged: (value) {
              emailController.text = value;
            },
          ),
          verticalSpaceRegular,
          ProfileTextfield(
            label: 'Phone Number',
            hintText: userDetails.phone?.toString() ?? '',
            initialValue: 'User',
            onChanged: (value) {
              phoneController.text = value;
            },
          ),
          verticalSpaceRegular,
          ProfileTextfield(
            label: 'Address',
            hintText: userDetails.address ?? '',
            initialValue: 'User',
            onChanged: (value) {
              addressController.text = value;
            },
          ),
          verticalSpaceRegular,
          Container(
            padding: EdgeInsets.symmetric(horizontal: 15),
            child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Container(
                    height: 50,
                    width: 250,
                    alignment: Alignment.center,
                    decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(10)),
                    padding: EdgeInsets.symmetric(horizontal: 15),
                    child: Text(
                      'Select Location',
                      style: GoogleFonts.poppins(
                          fontSize: 15,
                          decoration: TextDecoration.none,
                          color: Colors.grey),
                    ),
                  ),
                  Container(
                      decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.circular(10)),
                      child: MaterialButton(
                        height: 30,
                        onPressed: () {},
                        child: Icon(
                          Icons.location_searching,
                          color: Colors.green,
                          size: 25,
                        ),
                      )),
                ]),
          ),
          verticalSpaceRegular,
          Container(
            padding: EdgeInsets.symmetric(horizontal: 15),
            child: Text(
                'This location will enable new section in home for nearby properties',
                style: GoogleFonts.poppins(
                    color: AppColors.textColorPrimary,
                    fontSize: 15,
                    fontWeight: FontWeight.w400,
                    decoration: TextDecoration.none)),
          ),
          verticalSpaceRegular,
          Container(
              width: MediaQuery.of(context).size.width - 40,
              child: Container(
                height: 35,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(5),
                ),
                child: ElevatedButton(
                  style: ButtonStyle(
                    backgroundColor: MaterialStateProperty.all(Colors.orange),
                  ),
                  onPressed: () {
                    updateProfile();
                  },
                  child: Text(
                    "Update Profile",
                    style: GoogleFonts.poppins(
                      fontSize: 25,
                      color: Colors.white,
                    ),
                  ),
                ),
              ))
        ]),
      ),
    );
  }
}

class ProfileTextfield extends StatefulWidget {
  final String label;
  final String hintText;
  final String initialValue;
  final Function(String) onChanged;
  ProfileTextfield({
    required this.label,
    required this.hintText,
    required this.initialValue,
    required this.onChanged,
  });

  @override
  State<ProfileTextfield> createState() => _ProfileTextfieldState();
}

class _ProfileTextfieldState extends State<ProfileTextfield> {
  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            widget.label,
            style: GoogleFonts.poppins(
                fontWeight: FontWeight.w400,
                color: AppColors.textColorPrimary,
                decoration: TextDecoration.none,
                fontSize: 15),
          ),
          verticalSpaceSmall,
          Material(
            color: Colors.white,
            child: TextField(
              enabled: null,
              decoration: InputDecoration(
                contentPadding:
                    EdgeInsets.symmetric(horizontal: 10, vertical: 0),
                fillColor: Colors.white,
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(5),
                ),
                hintStyle:
                    GoogleFonts.poppins(fontSize: 15, color: Colors.grey),
                hintText: widget.hintText,
              ),
              // initialValue: widget.initialValue,
              onChanged: widget.onChanged,
            ),
          ),
        ],
      ),
    );
  }
}
